Smalltalk garbageCollect.
allPharos := MooseModel root asOrderedCollection.

allClassNames := (allPharos flatCollect: [ :e | e allModelClasses collect: #name ]) asSet.

allVersionedClasses := (allClassNames collect: [ :e | e -> (((allPharos withIndexCollect: [ :f :i | i -> (f allModelClasses detect: [ :g | g name = e ] ifNone: [ nil ]) ]) reject: [ :f | f value isNil ]) collect: [ :f | f key -> (f value comments ifEmpty: [ '' ] ifNotEmpty: [ :g | g first content ] )]) asDictionary ])asDictionary .

allVersionedChanges := (allVersionedClasses associations collect: [ :e |
	|comments changes|
	comments := e value associations sorted: [ :a :b | a key < b key ].
	changes := comments withIndexCollect:[:f :i | 
		|commentExists|
		commentExists := f value isNotEmpty.
		i=1
		ifTrue: [ 
			f key -> (commentExists ifTrue: [ #comment -> #classAdded] ifFalse:[ #nocomment -> #classAdded])]
		ifFalse:[
			|previousComment previousCommentExist commentChanged|
			previousComment := (comments at: i-1) value.
			previousCommentExist := previousComment isNotEmpty.
			commentChanged := f value ~= previousComment.
			f key -> ((commentExists 
				ifTrue: [#comment]
			 	ifFalse:[#noComment]) -> 
				(commentExists = previousCommentExist
					ifTrue: [ commentChanged ifTrue: [ #changed ] ifFalse: [ #unchanged ] ]
					ifFalse: [ commentExists ifTrue: [ #commentAdded ] ifFalse: [ #commentRemoved ]]))]].
			e key -> changes asOrderedDictionary ]) asDictionary.
	

commentsAddedInLaterVersion := 
(allVersionedChanges
 associations collect: 
[ :e | e key -> (e value associations select: [ :g | g  value key = #comment  and: [ g value value = #commentAdded  ] ])
	])reject: [ :e | e value isEmpty ].

commentChanged := 
((allVersionedChanges
 associations collect: [ :e |
	f := (e value associations select: [ :a | ((a value key = #comment) and: [ a value value = #changed ])]).
	 e key -> f ])asDictionary) reject: [ :e | e value isEmpty].



